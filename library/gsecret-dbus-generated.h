/*
 * Generated by gdbus-codegen 2.30.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GSECRET_DBUS_GENERATED_H__
#define __GSECRET_DBUS_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Secret.Service */

#define GSECRET_GEN_TYPE_SERVICE (_gsecret_gen_service_get_type ())
#define GSECRET_GEN_SERVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GSECRET_GEN_TYPE_SERVICE, GSecretGenService))
#define GSECRET_GEN_IS_SERVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GSECRET_GEN_TYPE_SERVICE))
#define GSECRET_GEN_SERVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GSECRET_GEN_TYPE_SERVICE, GSecretGenServiceIface))

struct _GSecretGenService;
typedef struct _GSecretGenService GSecretGenService;
typedef struct _GSecretGenServiceIface GSecretGenServiceIface;

struct _GSecretGenServiceIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_create_collection) (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_properties,
    const gchar *arg_alias);

  gboolean (*handle_get_secrets) (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_items,
    const gchar *arg_session);

  gboolean (*handle_lock) (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_objects);

  gboolean (*handle_open_session) (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_algorithm,
    GVariant *arg_input);

  gboolean (*handle_read_alias) (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_search_items) (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_attributes);

  gboolean (*handle_set_alias) (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_collection);

  gboolean (*handle_unlock) (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_objects);

  const gchar *const * (*get_collections) (GSecretGenService *object);

  void (*collection_changed) (
    GSecretGenService *object,
    const gchar *arg_collection);

  void (*collection_created) (
    GSecretGenService *object,
    const gchar *arg_collection);

  void (*collection_deleted) (
    GSecretGenService *object,
    const gchar *arg_collection);

};

GType _gsecret_gen_service_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *_gsecret_gen_service_interface_info (void);
guint _gsecret_gen_service_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void _gsecret_gen_service_complete_open_session (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    GVariant *output,
    const gchar *result);

void _gsecret_gen_service_complete_create_collection (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    const gchar *collection,
    const gchar *prompt);

void _gsecret_gen_service_complete_search_items (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *unlocked,
    const gchar *const *locked);

void _gsecret_gen_service_complete_unlock (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *unlocked,
    const gchar *prompt);

void _gsecret_gen_service_complete_lock (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *locked,
    const gchar *Prompt);

void _gsecret_gen_service_complete_get_secrets (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    GVariant *secrets);

void _gsecret_gen_service_complete_read_alias (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation,
    const gchar *collection);

void _gsecret_gen_service_complete_set_alias (
    GSecretGenService *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void _gsecret_gen_service_emit_collection_created (
    GSecretGenService *object,
    const gchar *arg_collection);

void _gsecret_gen_service_emit_collection_deleted (
    GSecretGenService *object,
    const gchar *arg_collection);

void _gsecret_gen_service_emit_collection_changed (
    GSecretGenService *object,
    const gchar *arg_collection);



/* D-Bus method calls: */
void _gsecret_gen_service_call_open_session (
    GSecretGenService *proxy,
    const gchar *arg_algorithm,
    GVariant *arg_input,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean _gsecret_gen_service_call_open_session_finish (
    GSecretGenService *proxy,
    GVariant **out_output,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean _gsecret_gen_service_call_open_session_sync (
    GSecretGenService *proxy,
    const gchar *arg_algorithm,
    GVariant *arg_input,
    GVariant **out_output,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void _gsecret_gen_service_call_create_collection (
    GSecretGenService *proxy,
    GVariant *arg_properties,
    const gchar *arg_alias,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean _gsecret_gen_service_call_create_collection_finish (
    GSecretGenService *proxy,
    gchar **out_collection,
    gchar **out_prompt,
    GAsyncResult *res,
    GError **error);

gboolean _gsecret_gen_service_call_create_collection_sync (
    GSecretGenService *proxy,
    GVariant *arg_properties,
    const gchar *arg_alias,
    gchar **out_collection,
    gchar **out_prompt,
    GCancellable *cancellable,
    GError **error);

void _gsecret_gen_service_call_search_items (
    GSecretGenService *proxy,
    GVariant *arg_attributes,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean _gsecret_gen_service_call_search_items_finish (
    GSecretGenService *proxy,
    gchar ***out_unlocked,
    gchar ***out_locked,
    GAsyncResult *res,
    GError **error);

gboolean _gsecret_gen_service_call_search_items_sync (
    GSecretGenService *proxy,
    GVariant *arg_attributes,
    gchar ***out_unlocked,
    gchar ***out_locked,
    GCancellable *cancellable,
    GError **error);

void _gsecret_gen_service_call_unlock (
    GSecretGenService *proxy,
    const gchar *const *arg_objects,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean _gsecret_gen_service_call_unlock_finish (
    GSecretGenService *proxy,
    gchar ***out_unlocked,
    gchar **out_prompt,
    GAsyncResult *res,
    GError **error);

gboolean _gsecret_gen_service_call_unlock_sync (
    GSecretGenService *proxy,
    const gchar *const *arg_objects,
    gchar ***out_unlocked,
    gchar **out_prompt,
    GCancellable *cancellable,
    GError **error);

void _gsecret_gen_service_call_lock (
    GSecretGenService *proxy,
    const gchar *const *arg_objects,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean _gsecret_gen_service_call_lock_finish (
    GSecretGenService *proxy,
    gchar ***out_locked,
    gchar **out_Prompt,
    GAsyncResult *res,
    GError **error);

gboolean _gsecret_gen_service_call_lock_sync (
    GSecretGenService *proxy,
    const gchar *const *arg_objects,
    gchar ***out_locked,
    gchar **out_Prompt,
    GCancellable *cancellable,
    GError **error);

void _gsecret_gen_service_call_get_secrets (
    GSecretGenService *proxy,
    const gchar *const *arg_items,
    const gchar *arg_session,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean _gsecret_gen_service_call_get_secrets_finish (
    GSecretGenService *proxy,
    GVariant **out_secrets,
    GAsyncResult *res,
    GError **error);

gboolean _gsecret_gen_service_call_get_secrets_sync (
    GSecretGenService *proxy,
    const gchar *const *arg_items,
    const gchar *arg_session,
    GVariant **out_secrets,
    GCancellable *cancellable,
    GError **error);

void _gsecret_gen_service_call_read_alias (
    GSecretGenService *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean _gsecret_gen_service_call_read_alias_finish (
    GSecretGenService *proxy,
    gchar **out_collection,
    GAsyncResult *res,
    GError **error);

gboolean _gsecret_gen_service_call_read_alias_sync (
    GSecretGenService *proxy,
    const gchar *arg_name,
    gchar **out_collection,
    GCancellable *cancellable,
    GError **error);

void _gsecret_gen_service_call_set_alias (
    GSecretGenService *proxy,
    const gchar *arg_name,
    const gchar *arg_collection,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean _gsecret_gen_service_call_set_alias_finish (
    GSecretGenService *proxy,
    GAsyncResult *res,
    GError **error);

gboolean _gsecret_gen_service_call_set_alias_sync (
    GSecretGenService *proxy,
    const gchar *arg_name,
    const gchar *arg_collection,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *_gsecret_gen_service_get_collections (GSecretGenService *object);
gchar **_gsecret_gen_service_dup_collections (GSecretGenService *object);
void _gsecret_gen_service_set_collections (GSecretGenService *object, const gchar *const *value);


/* ---- */

#define GSECRET_GEN_TYPE_SERVICE_PROXY (_gsecret_gen_service_proxy_get_type ())
#define GSECRET_GEN_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GSECRET_GEN_TYPE_SERVICE_PROXY, GSecretGenServiceProxy))
#define GSECRET_GEN_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GSECRET_GEN_TYPE_SERVICE_PROXY, GSecretGenServiceProxyClass))
#define GSECRET_GEN_SERVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GSECRET_GEN_TYPE_SERVICE_PROXY, GSecretGenServiceProxyClass))
#define GSECRET_GEN_IS_SERVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GSECRET_GEN_TYPE_SERVICE_PROXY))
#define GSECRET_GEN_IS_SERVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GSECRET_GEN_TYPE_SERVICE_PROXY))

typedef struct _GSecretGenServiceProxy GSecretGenServiceProxy;
typedef struct _GSecretGenServiceProxyClass GSecretGenServiceProxyClass;
typedef struct _GSecretGenServiceProxyPrivate GSecretGenServiceProxyPrivate;

struct _GSecretGenServiceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GSecretGenServiceProxyPrivate *priv;
};

struct _GSecretGenServiceProxyClass
{
  GDBusProxyClass parent_class;
};

GType _gsecret_gen_service_proxy_get_type (void) G_GNUC_CONST;

void _gsecret_gen_service_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GSecretGenService *_gsecret_gen_service_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GSecretGenService *_gsecret_gen_service_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void _gsecret_gen_service_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GSecretGenService *_gsecret_gen_service_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GSecretGenService *_gsecret_gen_service_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GSECRET_GEN_TYPE_SERVICE_SKELETON (_gsecret_gen_service_skeleton_get_type ())
#define GSECRET_GEN_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GSECRET_GEN_TYPE_SERVICE_SKELETON, GSecretGenServiceSkeleton))
#define GSECRET_GEN_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GSECRET_GEN_TYPE_SERVICE_SKELETON, GSecretGenServiceSkeletonClass))
#define GSECRET_GEN_SERVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GSECRET_GEN_TYPE_SERVICE_SKELETON, GSecretGenServiceSkeletonClass))
#define GSECRET_GEN_IS_SERVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GSECRET_GEN_TYPE_SERVICE_SKELETON))
#define GSECRET_GEN_IS_SERVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GSECRET_GEN_TYPE_SERVICE_SKELETON))

typedef struct _GSecretGenServiceSkeleton GSecretGenServiceSkeleton;
typedef struct _GSecretGenServiceSkeletonClass GSecretGenServiceSkeletonClass;
typedef struct _GSecretGenServiceSkeletonPrivate GSecretGenServiceSkeletonPrivate;

struct _GSecretGenServiceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GSecretGenServiceSkeletonPrivate *priv;
};

struct _GSecretGenServiceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType _gsecret_gen_service_skeleton_get_type (void) G_GNUC_CONST;

GSecretGenService *_gsecret_gen_service_skeleton_new (void);


G_END_DECLS

#endif /* __GSECRET_DBUS_GENERATED_H__ */
